#!/usr/bin/env bash

# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script compiles manifest files with the image tags and places them in
# /release/...

set -euo pipefail
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
[[ -n "${DEBUG:-}" ]] && set -x

log() { echo "$1" >&2; }

TAG="${TAG:-latest}"
REPO_PREFIX="${REPO_PREFIX:-quay.io/signalfuse/microservices-demo-}"
OUT_DIR="${OUT_DIR:-${SCRIPTDIR}/../release}"
NODE_SELECTOR_KEY="${NODE_SELECTOR_KEY:--}"
NODE_SELECTOR_VALUE="${NODE_SELECTOR_VALUE:--}"
TOLERATION_KEY="${TOLERATION_KEY:--}"
TOLERATION_VALUE="${TOLERATION_VALUE:--}"

# Optional Splunk RUM configuration
RUM_REALM="${RUM_REALM:--}"
RUM_AUTH="${RUM_AUTH:--}"
RUM_APP_NAME="${RUM_APP_NAME:-hipster-shop-demo}"
RUM_ENVIRONMENT="${RUM_ENVIRONMENT:--}"
RUM_DEBUG="${RUM_DEBUG:--}"

print_license_header() {
    cat "${SCRIPTDIR}/license_header.txt"
    echo
}

print_autogenerated_warning() {
    cat<<EOF
# ----------------------------------------------------------
# WARNING: This file is autogenerated. Do not manually edit.
# ----------------------------------------------------------

EOF
}

# define gsed as a function on Linux for compatibility
[ "$(uname -s)" == "Linux" ] && gsed() {
    sed "$@"
}

read_manifests() {
    local dir
    dir="$1"

    while IFS= read -d $'\0' -r file; do
        # strip license headers (pattern "^# ")
        awk '
        /^[^# ]/ { found = 1 }
        found { print }' "${file}"

        echo "---"
    done < <(find "${dir}" -name '*.yaml' -type f -print0)
}

mk_kubernetes_manifests() {
    out_manifest="$(read_manifests "${SCRIPTDIR}/../kubernetes-manifests")"

    # replace env variables
    out_manifest="$(echo "${out_manifest}" | envsubst)"
    
    # replace "image" repo, tag for each service
    for dir in ./src/*/
    do
        svcname="$(basename "${dir}")"
        image="$REPO_PREFIX$svcname:$TAG"

        pattern="^(\s*)image:\s.*$svcname(.*)(\s*)"
        replace="\1image: $image\3"
        out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"
    done

    # insert node selector
    if [ ${NODE_SELECTOR_KEY} != "-" ] && [ ${NODE_SELECTOR_VALUE} != "-" ]
    then
        pattern="^(\s*)nodeSelector:"
        replace="\1nodeSelector: \n\1  ${NODE_SELECTOR_KEY}: ${NODE_SELECTOR_VALUE}"
        out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"
    fi

    # insert toleration
    if [ ${TOLERATION_KEY} != "-" ] && [ ${TOLERATION_VALUE} != "-" ]
    then
        pattern="^(\s*)tolerations:"
        replace="\1tolerations: \n\1- key: ${TOLERATION_KEY}\n\1  operator: Equal\n\1  value: ${TOLERATION_VALUE}"
        out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"
    fi

    # insert RUM instrumentation
    if [ ${RUM_REALM} != "-" ] && [ ${RUM_AUTH} != "-" ]
    then
        pattern="^(\s*)- name: RUM_REALM"
        replace="\1- name: RUM_REALM\n\1  value: \"${RUM_REALM}\""
        out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"

        pattern="^(\s*)- name: RUM_AUTH"
        replace="\1- name: RUM_AUTH\n\1  value: \"${RUM_AUTH}\""
        out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"

        pattern="^(\s*)- name: RUM_APP_NAME"
        replace="\1- name: RUM_APP_NAME\n\1  value: \"${RUM_APP_NAME}\""
        out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"

        if [ ${RUM_ENVIRONMENT} != "-" ]
        then
            pattern="^(\s*)- name: RUM_ENVIRONMENT"
            replace="\1- name: RUM_ENVIRONMENT\n\1  value: \"${RUM_ENVIRONMENT}\""
            out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"
        fi
        
        if [ ${RUM_DEBUG} != "-" ]
        then
            pattern="^(\s*)- name: RUM_DEBUG"
            replace="\1- name: RUM_DEBUG\n\1  value: \"${RUM_DEBUG}\""
            out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"
        fi
    fi

    # substitude loadgenerator port: 8089 -> 80
    pattern="^(\s*)port:\s+8089(\s*)"
    replace="\1port: 80\2"
    out_manifest="$(gsed -r "s|$pattern|$replace|g" <(echo "${out_manifest}") )"

    print_license_header
    print_autogenerated_warning
    echo "${out_manifest}"
}

mk_istio_manifests() {
    print_license_header
    print_autogenerated_warning
    read_manifests "${SCRIPTDIR}/../istio-manifests"
}

main() {
    mkdir -p "${OUT_DIR}"
    local k8s_manifests_file istio_manifests_file

    k8s_manifests_file="${OUT_DIR}/kubernetes-manifests.yaml"
    mk_kubernetes_manifests > "${k8s_manifests_file}"
    log "Written ${k8s_manifests_file}"

    istio_manifests_file="${OUT_DIR}/istio-manifests.yaml"
    mk_istio_manifests > "${istio_manifests_file}"
    log "Written ${istio_manifests_file}"
}

main
